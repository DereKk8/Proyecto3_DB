Agregar tablas de auditoria “logs” que permitirán llevar un control de los 
usuarios que realicen cambios sobre las tablas clientes y pedidos



CREATE TABLE CLIENTES_LOGS (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CODIGOCLIENTE NUMBER,
    OPERACION VARCHAR2(10 BYTE),
    USUARIO VARCHAR2(50 BYTE),
    FECHA TIMESTAMP
);

CREATE TABLE PEDIDOS_LOGS (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CODIGOCLIENTE NUMBER,
    OPERACION VARCHAR2(10 BYTE),
    USUARIO VARCHAR2(50 BYTE),
    FECHA TIMESTAMP
);

CREATE OR REPLACE TRIGGER AUDIT_CLIENTES
AFTER INSERT OR UPDATE OR DELETE ON CLIENTES
FOR EACH ROW
DECLARE
    v_operacion VARCHAR2(10);
    v_usuario VARCHAR2(50);
BEGIN
    IF INSERTING THEN
        v_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_operacion := 'DELETE';
    END IF;

    v_usuario := SYS_CONTEXT('USERENV', 'SESSION_USER');
    
    INSERT INTO CLIENTES_LOGS (
        CODIGOCLIENTE,
        OPERACION,
        USUARIO,
        FECHA
    ) VALUES (
        NVL(:NEW.CODIGOCLIENTE, :OLD.CODIGOCLIENTE),
        v_operacion,
        v_usuario,
        SYSTIMESTAMP 
    );
END;

CREATE OR REPLACE TRIGGER AUDIT_PEDIDOS
AFTER INSERT OR UPDATE OR DELETE ON PEDIDOS
FOR EACH ROW
DECLARE
    v_operacion VARCHAR2(10);
    v_usuario VARCHAR2(50);
BEGIN
    IF INSERTING THEN
        v_operacion := 'INSERT';
    ELSIF UPDATING THEN
        v_operacion := 'UPDATE';
    ELSIF DELETING THEN
        v_operacion := 'DELETE';
    END IF;

    v_usuario := SYS_CONTEXT('USERENV', 'SESSION_USER');
    
    INSERT INTO PEDIDOS_LOGS (
        CODIGOCLIENTE,
        OPERACION,
        USUARIO,
        FECHA
    ) VALUES (
        NVL(:NEW.CODIGOCLIENTE, :OLD.CODIGOCLIENTE),
        v_operacion,
        v_usuario,
        SYSTIMESTAMP 
    );
END;

UPDATE CLIENTES 
SET TELEFONO = 3204724441
WHERE CODIGOCLIENTE = 1;

SELECT * FROM clientes_logs;
